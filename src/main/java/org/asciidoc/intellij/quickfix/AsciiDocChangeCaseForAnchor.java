package org.asciidoc.intellij.quickfix;

import com.intellij.codeInspection.LocalQuickFix;
import com.intellij.codeInspection.LocalQuickFixBase;
import com.intellij.codeInspection.ProblemDescriptor;
import com.intellij.openapi.project.Project;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiNamedElement;
import com.intellij.psi.ResolveResult;
import org.asciidoc.intellij.psi.AsciiDocBlockId;
import org.asciidoc.intellij.psi.AsciiDocFileReference;
import org.asciidoc.intellij.psi.AsciiDocLink;
import org.asciidoc.intellij.psi.AsciiDocSection;
import org.asciidoc.intellij.psi.AsciiDocUtil;
import org.jetbrains.annotations.NotNull;

/**
 * @author Alexander Schwartz 2020
 */
public class AsciiDocChangeCaseForAnchor extends LocalQuickFixBase {
  public static final String NAME = "Change case for anchor";

  public AsciiDocChangeCaseForAnchor() {
    super(NAME);
  }

  @Override
  public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) {
    PsiElement element = descriptor.getPsiElement();
    if (element instanceof AsciiDocLink) {
      AsciiDocLink link = (AsciiDocLink) element;
      AsciiDocFileReference anchor = link.getAnchorReference();
      if (anchor != null) {
        ResolveResult[] resolveResultsAnchor = anchor.multiResolve(false);
        if (resolveResultsAnchor.length == 0) {
          ResolveResult[] resolveResultsAnchorCaseInsensitive = anchor.multiResolveAnchor(true);
          LocalQuickFix[] fixes = new LocalQuickFix[]{};
          if (resolveResultsAnchorCaseInsensitive.length == 1) {
            PsiElement target = resolveResultsAnchorCaseInsensitive[0].getElement();
            if (target instanceof PsiNamedElement) {
              link.setAnchor(((PsiNamedElement) target).getName());
            } else if (target instanceof AsciiDocSection) {
              AsciiDocSection section = (AsciiDocSection) target;
              AsciiDocBlockId blockId = section.getBlockId();
              if (blockId != null) {
                link.setAnchor(blockId.getName());
              } else {
                link.setAnchor(section.getAutogeneratedId());
              }
            }
          }
        }
      }
    }
  }

  @NotNull
  private static PsiElement createBlockId(@NotNull Project project, @NotNull String text) {
    return AsciiDocUtil.createFileFromText(project, text);
  }
}
