package org.asciidoc.intellij.psi;

import com.intellij.lang.ASTNode;
import com.intellij.navigation.ItemPresentation;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiElementVisitor;
import com.intellij.psi.stubs.IStubElementType;
import com.intellij.psi.tree.TokenSet;
import icons.AsciiDocIcons;
import org.asciidoc.intellij.inspections.AsciiDocVisitor;
import org.asciidoc.intellij.lexer.AsciiDocTokenTypes;
import org.asciidoc.intellij.parser.AsciiDocElementTypes;
import org.asciidoc.intellij.parser.AsciiDocParserImpl;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.TestOnly;

import javax.swing.*;
import java.util.List;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author yole
 */
public class AsciiDocSectionImpl extends AsciiDocSectionStubElementImpl<AsciiDocSectionStub> implements AsciiDocSelfDescribe, AsciiDocSection {
  private static final TokenSet HEADINGS = TokenSet.create(AsciiDocTokenTypes.HEADING, AsciiDocTokenTypes.HEADING_OLDSTYLE);

  public AsciiDocSectionImpl(AsciiDocSectionStub stub, IStubElementType nodeType) {
    super(stub, nodeType);
  }

  public AsciiDocSectionImpl(@NotNull ASTNode node) {
    super(node);
  }

  @Override
  @NotNull
  public String getTitle() {
    final AsciiDocSectionStub stub = getGreenStub();
    if (stub != null) {
      return stub.getTitle();
    }
    ASTNode heading = getNode().findChildByType(HEADINGS);
    if (heading != null) {
      return trimHeading(heading.getText());
    }
    return "<untitled>";
  }

  // taken from Asciidoctor (rx.rb#InvalidSectionIdCharsRx)
  public static final Pattern INVALID_SECTION_ID_CHARS = Pattern.compile("<[^>]+>|&(?:[a-z][a-z]+\\d{0,2}|#\\d\\d\\d{0,4}|#x[\\da-f][\\da-f][\\da-f]{0,3});|[^ \\w\\-.]+?");

  /**
   * Produces the ID from a section like Asciidoctor (section.rb#generate_id).
   * If there are duplicate IDs in the rendered document, they receive a suffix (_num); this is not included here.
   */
  @Override
  public String getAutogeneratedId() {
    // remove invalid characters and add prefix
    String idPrefix = getAttribute("idprefix", "_");
    String idSeparator = getAttribute("idseparator", "_");
    String key = idPrefix + INVALID_SECTION_ID_CHARS.matcher(getTitle().toLowerCase(Locale.US)).replaceAll("");
    // transform some characters to separator
    key = key.replaceAll("[ .-]", Matcher.quoteReplacement(idSeparator));
    // remove duplicates separators
    key = key.replaceAll(idSeparator + idSeparator, Matcher.quoteReplacement(idSeparator));
    // remove separator at end
    key = StringUtil.trimEnd(key, Matcher.quoteReplacement(idSeparator));
    return key;
  }

  @SuppressWarnings("SameParameterValue")
  @TestOnly
  protected String getAttribute(String attr, String defaultVal) {
    String val = defaultVal;
    List<AsciiDocAttributeDeclaration> idPrefixDecl = AsciiDocUtil.findAttributes(this.getProject(), attr);
    for (AsciiDocAttributeDeclaration asciiDocAttributeDeclaration : idPrefixDecl) {
      if (asciiDocAttributeDeclaration.getAttributeValue() != null) {
        val = asciiDocAttributeDeclaration.getAttributeValue();
        break;
      } else {
        val = "";
      }
    }
    return val;
  }

  @Nullable
  @Override
  public AsciiDocBlockId getBlockId() {
    ASTNode child = this.getNode().getFirstChildNode();
    while (child != null) {
      if (child.getElementType() == AsciiDocElementTypes.BLOCKID) {
        return (AsciiDocBlockId) child.getPsi();
      }
      if (HEADINGS.contains(child.getElementType())) {
        break;
      }
      child = child.getTreeNext();
    }
    return null;
  }

  @Override
  public String getAttribute(String name) {
    for (PsiElement child : this.getChildren()) {
      if (child instanceof AsciiDocBlockAttributes) {
        return ((AsciiDocBlockAttributes) child).getAttribute(name);
      }
      if (HEADINGS.contains(getNode().getElementType())) {
        break;
      }
    }
    return null;
  }

  /**
   * Compare a ID to the automatically generated ID of this section. Will ignore any numeric suffix in the ID.
   */
  @Override
  public boolean matchesAutogeneratedId(String keyToCompare) {
    String ownKey = getAutogeneratedId();
    if (keyToCompare.length() < ownKey.length()) {
      return false;
    }
    if (!keyToCompare.startsWith(ownKey)) {
      return false;
    }
    if (keyToCompare.length() == ownKey.length()) {
      return true;
    }
    //noinspection RedundantIfStatement
    if (keyToCompare.substring(ownKey.length()).matches("^_[0-9]*$")) {
      return true;
    }
    return false;
  }

  @Override
  public void accept(@NotNull PsiElementVisitor visitor) {
    if (visitor instanceof AsciiDocVisitor) {
      ((AsciiDocVisitor) visitor).visitSections(this);
      return;
    }

    super.accept(visitor);
  }

  private static String trimHeading(String text) {
    if (text.charAt(0) == '=') {
      // new style heading
      text = StringUtil.trimLeading(text, '=').trim();
    } else if (text.charAt(0) == '#') {
      // markdown style heading
      text = StringUtil.trimLeading(text, '#').trim();
    } else {
      // old style heading
      text = text.replaceAll("[-=~^+\n \t]*$", "");
    }
    return text;
  }

  @Override
  public String getName() {
    return getTitle();
  }

  @Override
  public ItemPresentation getPresentation() {
    return AsciiDocPsiImplUtil.getPresentation(this);
  }

  @Override
  public Icon getIcon(int ignored) {
    return AsciiDocIcons.Structure.SECTION;
  }

  @NotNull
  @Override
  public String getDescription() {
    return getTitle();
  }

  @NotNull
  @Override
  public String getFoldedSummary() {
    ASTNode heading = getNode().findChildByType(HEADINGS);
    if (heading == null) {
      throw new IllegalStateException("heading without heading");
    }
    return heading.getText();
  }

  @Override
  public int getHeadingLevel() {
    ASTNode heading = getNode().findChildByType(HEADINGS);
    if (heading == null) {
      throw new IllegalStateException("heading without heading");
    }
    return AsciiDocParserImpl.headingLevel(heading.getText());
  }

  @Override
  public String toString() {
    return getClass().getSimpleName() + "(" + getNode().getElementType().toString() + ")";
  }

}
